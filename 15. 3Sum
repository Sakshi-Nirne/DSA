class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

    // check nums[] contains values or not and we have to sum of three number so atleast 3 no. should be present
       if(nums==null || nums.length<3)
         return new ArrayList();

     // Array must be sorted
        Arrays.sort(nums);
     
        Set<List<Integer>> result=new HashSet<>();
// nums.length should be length-2

        for(int i=0;i<nums.length-2;i++)
        {
            int left=i+1;
            int right=nums.length-1;

            while(left<right)
            {
                int sum=nums[i]+nums[left]+nums[right];

                if(sum==0)
                {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    left++;
                    right--;
                }
                else if(sum<0)
                {
                    left++;
                }
                else{
                    right--;
                }
            }
      
        }
              return new ArrayList<>(result);
    }
}


output
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
